"""
X·ª≠ l√Ω d·ªØ li·ªáu nh√¢n s·ª±, ch·∫•m c√¥ng, ngh·ªâ ph√©p
Chu·∫©n b·ªã d·ªØ li·ªáu cho vi·ªác hu·∫•n luy·ªán model AI
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os

def load_data():
    """ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c file CSV"""
    # Get the directory where this script is located
    script_dir = os.path.dirname(os.path.abspath(__file__))
    # Go up one level to ai-analysis directory, then into data
    data_dir = os.path.join(os.path.dirname(script_dir), 'data')
    
    # ƒê·ªçc d·ªØ li·ªáu nh√¢n vi√™n
    df_nv = pd.read_csv(f'{data_dir}/nhan_vien.csv')
    print(f"‚úÖ ƒê√£ ƒë·ªçc {len(df_nv)} nh√¢n vi√™n")
    
    # ƒê·ªçc d·ªØ li·ªáu ch·∫•m c√¥ng
    df_cc = pd.read_csv(f'{data_dir}/cham_cong.csv')
    print(f"‚úÖ ƒê√£ ƒë·ªçc {len(df_cc)} b·∫£n ghi ch·∫•m c√¥ng")
    
    # ƒê·ªçc d·ªØ li·ªáu ngh·ªâ ph√©p
    df_np = pd.read_csv(f'{data_dir}/don_nghi_phep.csv')
    print(f"‚úÖ ƒê√£ ƒë·ªçc {len(df_np)} ƒë∆°n ngh·ªâ ph√©p")
    
    return df_nv, df_cc, df_np

def process_attendance_data(df_cc):
    """X·ª≠ l√Ω d·ªØ li·ªáu ch·∫•m c√¥ng"""
    # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu ng√†y th√°ng
    df_cc['ngay'] = pd.to_datetime(df_cc['ngay'])
    
    # T·ªïng h·ª£p theo nh√¢n vi√™n
    attendance_summary = df_cc.groupby('nhan_vien_id').agg({
        'ngay': 'count',  # S·ªë ng√†y ƒëi l√†m
        'phut_tre': lambda x: (x > 0).sum(),  # S·ªë l·∫ßn ƒëi mu·ªôn
        'phut_som': lambda x: (x > 0).sum(),  # S·ªë l·∫ßn v·ªÅ s·ªõm
        'gio_lam_thuc_te': 'mean'  # Gi·ªù l√†m vi·ªác trung b√¨nh
    }).rename(columns={
        'ngay': 'so_ngay_di_lam',
        'phut_tre': 'so_lan_di_muon',
        'phut_som': 'so_lan_ve_som',
        'gio_lam_thuc_te': 'gio_lam_viec_tb'
    })
    
    return attendance_summary

def process_leave_data(df_np):
    """X·ª≠ l√Ω d·ªØ li·ªáu ngh·ªâ ph√©p"""
    # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu ng√†y th√°ng
    df_np['ngay_nghi'] = pd.to_datetime(df_np['ngay_nghi'])
    
    # T·ªïng h·ª£p theo nh√¢n vi√™n
    leave_summary = df_np.groupby('nhan_vien_id').agg({
        'id': 'count'  # S·ªë ƒë∆°n ngh·ªâ ph√©p
    }).rename(columns={
        'id': 'so_don_nghi_phep'
    })
    
    # T√≠nh t·ªïng ng√†y ngh·ªâ ph√©p (ch·ªâ nh·ªØng ƒë∆°n ƒë√£ duy·ªát)
    approved_leaves = df_np[df_np['trang_thai'] == 'da_duyet'].groupby('nhan_vien_id').size()
    leave_summary['tong_ngay_nghi_phep'] = approved_leaves
    
    return leave_summary.fillna(0)

def process_employee_data(df_nv):
    """X·ª≠ l√Ω d·ªØ li·ªáu nh√¢n vi√™n"""
    # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu ng√†y th√°ng
    df_nv['ngay_sinh'] = pd.to_datetime(df_nv['ngay_sinh'])
    
    # T√≠nh tu·ªïi
    current_date = pd.Timestamp.now()
    df_nv['tuoi'] = (current_date - df_nv['ngay_sinh']).dt.days / 365.25
    
    # T√≠nh s·ªë nƒÉm l√†m vi·ªác (gi·∫£ s·ª≠ d·ª±a tr√™n tu·ªïi)
    df_nv['so_nam_lam_viec'] = df_nv['tuoi'] - 22  # Gi·∫£ s·ª≠ b·∫Øt ƒë·∫ßu l√†m vi·ªác t·ª´ 22 tu·ªïi
    df_nv['so_nam_lam_viec'] = df_nv['so_nam_lam_viec'].clip(lower=0)  # Kh√¥ng √¢m
    
    # M√£ h√≥a c√°c tr∆∞·ªùng ph√¢n lo·∫°i
    df_nv['phong_ban_encoded'] = df_nv['phong_ban_id'].astype('category').cat.codes
    df_nv['chuc_vu_encoded'] = df_nv['chuc_vu_id'].astype('category').cat.codes
    
    return df_nv

def combine_data(df_nv, attendance_summary, leave_summary):
    """K·∫øt h·ª£p t·∫•t c·∫£ d·ªØ li·ªáu"""
    # G·ªôp d·ªØ li·ªáu ch·∫•m c√¥ng
    df_combined = df_nv.set_index('id').join(attendance_summary, how='left')
    
    # G·ªôp d·ªØ li·ªáu ngh·ªâ ph√©p
    df_combined = df_combined.join(leave_summary, how='left')
    
    # ƒêi·ªÅn gi√° tr·ªã thi·∫øu b·∫±ng 0
    df_combined = df_combined.fillna(0)
    
    return df_combined

def create_features(df_combined):
    """T·∫°o c√°c feature cho model AI"""
    features = [
        'so_ngay_di_lam',
        'so_lan_di_muon', 
        'so_lan_ve_som',
        'gio_lam_viec_tb',
        'tong_ngay_nghi_phep',
        'so_don_nghi_phep',
        'so_nam_lam_viec',
        'phong_ban_encoded',
        'chuc_vu_encoded',
        'tuoi'
    ]
    
    # Ch·ªçn c√°c c·ªôt c·∫ßn thi·∫øt
    df_features = df_combined[features].copy()
    
    # Th√™m label (gi·∫£ s·ª≠ c√≥ c·ªôt 'nghi_viec')
    if 'nghi_viec' in df_combined.columns:
        df_features['nghi_viec'] = df_combined['nghi_viec']
    
    return df_features

def main():
    """H√†m ch√≠nh x·ª≠ l√Ω d·ªØ li·ªáu"""
    print("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu...")
    
    try:
        # ƒê·ªçc d·ªØ li·ªáu
        df_nv, df_cc, df_np = load_data()
        
        # X·ª≠ l√Ω t·ª´ng lo·∫°i d·ªØ li·ªáu
        print("X·ª≠ l√Ω d·ªØ li·ªáu ch·∫•m c√¥ng...")
        attendance_summary = process_attendance_data(df_cc)
        
        print("X·ª≠ l√Ω d·ªØ li·ªáu ngh·ªâ ph√©p...")
        leave_summary = process_leave_data(df_np)
        
        print("X·ª≠ l√Ω d·ªØ li·ªáu nh√¢n vi√™n...")
        df_nv_processed = process_employee_data(df_nv)
        
        # K·∫øt h·ª£p d·ªØ li·ªáu
        print("K·∫øt h·ª£p d·ªØ li·ªáu...")
        df_combined = combine_data(df_nv_processed, attendance_summary, leave_summary)
        
        # T·∫°o features
        print("T·∫°o features cho model...")
        df_features = create_features(df_combined)
        
        # L∆∞u k·∫øt qu·∫£
        script_dir = os.path.dirname(os.path.abspath(__file__))
        data_dir = os.path.join(os.path.dirname(script_dir), 'data')
        output_path = os.path.join(data_dir, 'nhan_su_processed.csv')
        df_features.to_csv(output_path, index=True)
        
        print(f"‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√†o: {output_path}")
        print(f"üìà T·ªïng s·ªë nh√¢n vi√™n: {len(df_features)}")
        print(f"üéØ S·ªë features: {len(df_features.columns) - 1}")  # Tr·ª´ c·ªôt label
        
        # Hi·ªÉn th·ªã th·ªëng k√™ c∆° b·∫£n
        print("\nüìä Th·ªëng k√™ d·ªØ li·ªáu:")
        print(df_features.describe())
        
    except FileNotFoundError as e:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu - {e}")
        print("üí° H√£y ƒë·∫£m b·∫£o c√°c file CSV ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong th∆∞ m·ª•c data/")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main() 